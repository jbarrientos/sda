@model IEnumerable<SDA.WebApp.ViewModels.SummaryContingentesViewModel>

@{
    ViewBag.Title = "Contingentes vigentes";

    int[] result = ViewBag.intArray;
    string test = "";

    for (int i = 0; i < result.Length; i++)
    {
        if (i == 0)
        {
            test = test + " " + result[i].ToString();
        }
        else
        {
            test = test + "," + result[i].ToString();
        }
    }

    var contingentes = Model;
    string strContingentes = "";
    string strAsignado = "";
    string strImportado = "";

    foreach (var cont in contingentes)
    {
        if (strContingentes == "")
        {
            strContingentes = cont.Nombre;
            strAsignado = cont.Asignado.ToString() + "," + cont.Importado.ToString();
        }

    }
}


<h2>@strContingentes</h2>
<canvas id="myChart" width="600" height="300"></canvas>

<script charset="utf-8">
    var result = "@test";
    //console.log(("@strContingentes").replace("&#241;", "\u00F1"));
    var resultsArray = result.split(',');
    var context = $("#myChart").get(0).getContext("2d");

    var jsContingentes = ("@strContingentes").replace("&#241;", "\u00F1").replace("&aacute;", "\u00E1").replace("&iacute;", "\u00ED").replace("&#243;", "\u00F3"); // "@strContingentes";
    var asignado = "@strAsignado";
    var arrAsignado = asignado.split(',');

    var data = {
        labels: ["Asignado","Importado"], // ["January", "February", "March", "April", "May", "June", "July"],

        datasets: [{
            label: jsContingentes,
            data: arrAsignado,
            backgroundColor: [
                'rgba(255, 99, 132, 0.4)',
                'rgba(54, 162, 235, 0.4)',
                'rgba(255, 206, 86, 0.4)',
                'rgba(75, 192, 192, 0.4)',
                'rgba(153, 102, 255, 0.4)',
                'rgba(255, 159, 64, 0.4)'
            ],
            borderColor: [
                'rgba(255,99,132,1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    };

    var options = {
        ///Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: true,
        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",
        //Number - Width of the grid lines
        scaleGridLineWidth: 1,
        //Boolean - Whether the line is curved between points
        bezierCurve: true,
        //Number - Tension of the bezier curve between points
        bezierCurveTension: 0.4,
        //Boolean - Whether to show a dot for each point
        pointDot: true,
        //Number - Radius of each point dot in pixels
        pointDotRadius: 4,
        //Number - Pixel width of point dot stroke
        pointDotStrokeWidth: 1,
        //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
        pointHitDetectionRadius: 20,
        //Boolean - Whether to show a stroke for datasets
        datasetStroke: true,
        //Number - Pixel width of dataset stroke
        datasetStrokeWidth: 2,
        //Boolean - Whether to fill the dataset with a colour
        datasetFill: true,
        title: {
            display: false
        }


    };

    var myLineChart = new Chart(context, {
        type: "bar",
        data: data,
        options:options
    });

    // var myLineChart = new Chart(context).Line(data, options);
</script>


